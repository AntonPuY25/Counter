{"version":3,"sources":["counter.tsx","clicker.tsx","settingsCounter/settingsCounter.tsx","settingsCounter/settingsClicker.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Counter","props","className","style","settings","display","counter","maxValue","Clicker","onClick","increase","disabled","count","reset","minValue","set","SettingsCounter","setMax","setMin","value","onChange","event","currentTarget","Number","changeMax","type","changeMin","SettingsClicker","setValue","App","useState","setCount","setMaxValue","setMinValue","setSettings","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7ca75a1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './App.css';\r\n\r\ntype TypeCouneter = {\r\n    counter: number\r\n    maxValue:number\r\n    settings:boolean\r\n}\r\nconst Counter = (props: TypeCouneter) => {\r\n    const displayNone = {\r\n        display:'none'\r\n    }\r\n    const displayBlock = {\r\n        display:'block'\r\n    }\r\n    return <div>\r\n        <div className='counter' style={props.settings?displayBlock:displayNone}>\r\n            <div className={props.counter === props.maxValue ? 'countRed' : 'count'}>{props.counter}</div>\r\n        </div>\r\n    </div>\r\n}\r\nexport default Counter;","import React from \"react\";\r\n\r\ntype TypeClicker = {\r\n    increase: () => void\r\n    reset: () => void\r\n    count: number\r\n    maxValue:number\r\n    minValue:number\r\n    set:()=>void\r\n    settings:boolean\r\n}\r\nconst Clicker = (props: TypeClicker) => {\r\n    const displayNone = {\r\n        display:'none'\r\n    }\r\n    const displayBlock = {\r\n        display:'block'\r\n    }\r\n    return <div className='clicker' style={props.settings?displayBlock:displayNone} >\r\n\r\n        <div>\r\n            <button onClick={props.increase} disabled={props.count >= props.maxValue ? true : false}\r\n                    className='btnInc'>Inc\r\n            </button>\r\n        </div>\r\n        <div>\r\n            <button onClick={props.reset} disabled={props.count <= props.minValue ? true :false }\r\n                    className='btnReset'>Reset\r\n            </button>\r\n        </div>\r\n        <div>\r\n            <button onClick={props.set}\r\n                    className='btnSet'>Set\r\n            </button>\r\n        </div>\r\n\r\n    </div>\r\n\r\n}\r\nexport default Clicker;","import React, {ChangeEvent} from \"react\";\r\nimport '../App.css';\r\n\r\nexport type TypePropsSettingsCounter = {\r\n    maxValue: number\r\n    setMax: (value: number) => void\r\n    minValue: number\r\n    setMin: (value: number) => void\r\n    settings: boolean\r\n\r\n}\r\nconst SettingsCounter: React.FC<TypePropsSettingsCounter> = ({\r\n                                                                 maxValue, setMax,\r\n                                                                 minValue, setMin,\r\n                                                                 settings\r\n\r\n                                                             }) => {\r\n    const changeMax = (event: ChangeEvent<HTMLInputElement>) => {\r\n        let value = event.currentTarget.value;\r\n        setMax(Number(value))\r\n    }\r\n\r\n    const changeMin = (event: ChangeEvent<HTMLInputElement>) => {\r\n        let value = event.currentTarget.value;\r\n        setMin(Number(value))\r\n    }\r\n    const displayNone = {\r\n        display: 'none'\r\n    }\r\n    const displayBlock = {\r\n        display: 'block'\r\n    }\r\n    return <div className='counter1' style={settings ? displayNone : displayBlock}>\r\n\r\n        <div className={`${maxValue < 0 || maxValue <= minValue ? \"maxValue error\" : \"maxValue\"}`}>\r\n            <span>Max Value</span>\r\n            <span>\r\n                <input value={maxValue}\r\n                       onChange={(event) => {\r\n                           changeMax(event)\r\n                       }}\r\n                       type='number'/></span>\r\n        </div>\r\n        <div className={`${minValue < 0 || minValue >= maxValue ? \"minValue error\" : \"minValue\"}`}>\r\n            <span>Min Value</span>\r\n            <span><input\r\n\r\n                value={minValue}\r\n                onChange={(event) => {\r\n                    changeMin(event)\r\n                }}\r\n                type='number'/></span>\r\n        </div>\r\n    </div>\r\n}\r\nexport default SettingsCounter;","import React from \"react\";\r\nimport '../App.css';\r\n\r\nexport type TypePropsSettingsClicker = {\r\n    maxValue: number\r\n    minValue: number\r\n    setValue: () => void\r\n    settings: boolean\r\n\r\n}\r\nconst SettingsClicker: React.FC<TypePropsSettingsClicker> = ({\r\n                                                                 minValue,\r\n                                                                 maxValue,\r\n                                                                 setValue, settings\r\n\r\n\r\n                                                             }) => {\r\n    let setValueButton = () => {\r\n        setValue();\r\n    }\r\n    const displayNone = {\r\n        display: 'none'\r\n    }\r\n    const displayBlock = {\r\n        display: 'block'\r\n    }\r\n    return <div className='clicker1' style={settings ? displayNone : displayBlock}>\r\n\r\n        <div>\r\n            <button disabled={maxValue < 0 || maxValue <= minValue || minValue < 0\r\n            || minValue >= maxValue}\r\n                    onClick={setValueButton}\r\n                    className='btnSet'>Set\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\nexport default SettingsClicker","import React, {useState} from 'react';\nimport './App.css';\nimport Counter from \"./counter\";\nimport Clicker from \"./clicker\";\nimport SettingsCounter from \"./settingsCounter/settingsCounter\";\nimport SettingsClicker from \"./settingsCounter/settingsClicker\";\n\nfunction App() {\n    let [count, setCount] = useState<number>(0)\n    let [maxValue, setMaxValue] = useState<number>(5)\n    let [minValue, setMinValue] = useState<number>(0)\n    let [settings, setSettings] = useState<boolean>(true)\n    const setMax = (value: number) => {\n        setMaxValue(value)\n    }\n    const setMin = (value: number) => {\n        setMinValue(value)\n    }\n    const setValue = () => {\n        setSettings(!settings)\n        setCount(minValue)\n    }\n    const inc = () => {\n        setCount(count + 1)\n    }\n    const reset = () => {\n\n        setCount(minValue)\n    }\n    const set = () => {\n        setSettings(!settings)\n    }\n    return (<div className='Main'>\n            <Counter counter={count} maxValue={maxValue} settings={settings}/>\n            <Clicker increase={inc} reset={reset} count={count}\n                     maxValue={maxValue} minValue={minValue} set={set} settings={settings}/>\n            <SettingsCounter maxValue={maxValue} setMax={setMax}\n                             setMin={setMin} minValue={minValue} settings={settings}/>\n            <SettingsClicker maxValue={maxValue} minValue={minValue}\n                             setValue={setValue} settings={settings}/>\n        </div>\n\n\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}