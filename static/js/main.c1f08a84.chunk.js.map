{"version":3,"sources":["counter.tsx","clicker.tsx","settingsCounter/settingsCounter.tsx","settingsCounter/settingsClicker.tsx","Store/counterReducer.ts","App.tsx","reportWebVitals.ts","Store/store.ts","index.tsx"],"names":["Counter","props","className","style","settings","display","counter","maxValue","Clicker","onClick","increase","disabled","count","reset","minValue","set","SettingsCounter","setMax","setMin","value","onChange","event","currentTarget","Number","changeMax","type","changeMin","SettingsClicker","setValue","initialState","min","max","counterReducer","state","action","setMaxAC","setMinAC","App","useSelector","dispatch","useDispatch","useEffect","localStorage","getItem","JSON","parse","getState","currentValueMax","setItem","stringify","currentValueMin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1f08a84.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './App.css';\r\n\r\ntype TypeCouneter = {\r\n    counter: number\r\n    maxValue:number\r\n    settings:boolean\r\n}\r\nconst Counter = (props: TypeCouneter) => {\r\n    const displayNone = {\r\n        display:'none'\r\n    }\r\n    const displayBlock = {\r\n        display:'block'\r\n    }\r\n    return <div>\r\n        <div className='counter' style={props.settings?displayBlock:displayNone}>\r\n            <div className={props.counter === props.maxValue ? 'countRed' : 'count'}>{props.counter}</div>\r\n        </div>\r\n    </div>\r\n}\r\nexport default Counter;","import React from \"react\";\r\n\r\ntype TypeClicker = {\r\n    increase: () => void\r\n    reset: () => void\r\n    count: number\r\n    maxValue:number\r\n    minValue:number\r\n    set:()=>void\r\n    settings:boolean\r\n}\r\nconst Clicker = (props: TypeClicker) => {\r\n    const displayNone = {\r\n        display:'none'\r\n    }\r\n    const displayBlock = {\r\n        display:'block'\r\n    }\r\n    return <div className='clicker' style={props.settings?displayBlock:displayNone} >\r\n\r\n        <div>\r\n            <button onClick={props.increase} disabled={props.count >= props.maxValue ? true : false}\r\n                    className='btnInc'>Inc\r\n            </button>\r\n        </div>\r\n        <div>\r\n            <button onClick={props.reset} disabled={props.count <= props.minValue ? true :false }\r\n                    className='btnReset'>Reset\r\n            </button>\r\n        </div>\r\n        <div>\r\n            <button onClick={props.set}\r\n                    className='btnSet'>Set\r\n            </button>\r\n        </div>\r\n\r\n    </div>\r\n\r\n}\r\nexport default Clicker;","import React, {ChangeEvent} from \"react\";\r\nimport '../App.css';\r\n\r\nexport type TypePropsSettingsCounter = {\r\n    maxValue: number\r\n    setMax: (value: number) => void\r\n    minValue: number\r\n    setMin: (value: number) => void\r\n    settings: boolean\r\n\r\n}\r\nconst SettingsCounter: React.FC<TypePropsSettingsCounter> = ({\r\n                                                                 maxValue, setMax,\r\n                                                                 minValue, setMin,\r\n                                                                 settings\r\n\r\n                                                             }) => {\r\n    const changeMax = (event: ChangeEvent<HTMLInputElement>) => {\r\n        let value = event.currentTarget.value;\r\n        setMax(Number(value))\r\n    }\r\n\r\n    const changeMin = (event: ChangeEvent<HTMLInputElement>) => {\r\n        let value = event.currentTarget.value;\r\n        setMin(Number(value))\r\n    }\r\n    const displayNone = {\r\n        display: 'none'\r\n    }\r\n    const displayBlock = {\r\n        display: 'block'\r\n    }\r\n    return <div className='counter1' style={settings ? displayNone : displayBlock}>\r\n\r\n        <div className={`${maxValue < 0 || maxValue <= minValue ? \"maxValue error\" : \"maxValue\"}`}>\r\n            <span>Max Value</span>\r\n            <span>\r\n                <input value={maxValue}\r\n                       onChange={(event) => {\r\n                           changeMax(event)\r\n                       }}\r\n                       type='number'/></span>\r\n        </div>\r\n        <div className={`${minValue < 0 || minValue >= maxValue ? \"minValue error\" : \"minValue\"}`}>\r\n            <span>Min Value</span>\r\n            <span><input\r\n\r\n                value={minValue}\r\n                onChange={(event) => {\r\n                    changeMin(event)\r\n                }}\r\n                type='number'/></span>\r\n        </div>\r\n    </div>\r\n}\r\nexport default SettingsCounter;","import React from \"react\";\r\nimport '../App.css';\r\n\r\nexport type TypePropsSettingsClicker = {\r\n    maxValue: number\r\n    minValue: number\r\n    setValue: () => void\r\n    settings: boolean\r\n\r\n}\r\nconst SettingsClicker: React.FC<TypePropsSettingsClicker> = ({\r\n                                                                 minValue,\r\n                                                                 maxValue,\r\n                                                                 setValue, settings\r\n\r\n\r\n                                                             }) => {\r\n    let setValueButton = () => {\r\n        setValue();\r\n    }\r\n    const displayNone = {\r\n        display: 'none'\r\n    }\r\n    const displayBlock = {\r\n        display: 'block'\r\n    }\r\n    return <div className='clicker1' style={settings ? displayNone : displayBlock}>\r\n\r\n        <div>\r\n            <button disabled={maxValue < 0 || maxValue <= minValue || minValue < 0\r\n            || minValue >= maxValue}\r\n                    onClick={setValueButton}\r\n                    className='btnSet'>Set\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\nexport default SettingsClicker","import {ThunkAction} from \"redux-thunk\";\r\nimport {TypeStoreRedux} from \"./store\";\r\n\r\nexport type TypeStateReducer = {\r\n    min: number\r\n    max: number\r\n    settings: boolean\r\n    count: number\r\n}\r\n\r\nexport const initialState: TypeStateReducer = {\r\n    min: 0,\r\n    max: 5,\r\n    settings: true,\r\n    count:0,\r\n\r\n}\r\n\r\ntype Actions = actionSetMax\r\n    | actionSetMin\r\n    | actionSetSettings\r\n    | actionCount\r\n    | actionReset;\r\n\r\nexport const counterReducer = (state: TypeStateReducer=initialState, action: Actions): TypeStateReducer => {\r\n    switch (action.type) {\r\n        case \"SET_MAX\": {\r\n            return {\r\n                ...state,\r\n                max: action.max\r\n            }\r\n\r\n        }\r\n        case \"SET_MIN\": {\r\n            return {\r\n                ...state,\r\n                min: action.min,\r\n                count: action.min\r\n            }\r\n        }\r\n        case \"SET_SETTINGS\": {\r\n            return {\r\n                ...state,\r\n                settings: !state.settings\r\n            }\r\n        }\r\n        case \"SET_COUNT\": {\r\n            return {\r\n                ...state,\r\n                count: state.count + 1\r\n            }\r\n        }\r\n        case \"RESET\":{\r\n            return {...state,\r\n            count:state.min\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\nexport default counterReducer;\r\ntype actionSetMax = ReturnType<typeof setMaxAC>\r\nexport const setMaxAC = (max: number) => {\r\n    return {\r\n        type: 'SET_MAX',\r\n        max\r\n\r\n    } as const\r\n}\r\ntype actionSetMin = ReturnType<typeof setMinAC>\r\nexport const setMinAC = (min: number) => {\r\n    return {\r\n        type: 'SET_MIN',\r\n        min\r\n\r\n    } as const\r\n}\r\ntype actionSetSettings = ReturnType<typeof setSettingsAC>\r\nexport const setSettingsAC = () => {\r\n    return {\r\n        type: \"SET_SETTINGS\"\r\n    } as const\r\n}\r\ntype actionCount = ReturnType<typeof setCountAC>\r\nexport const setCountAC = () => {\r\n    return {\r\n        type: \"SET_COUNT\"\r\n    } as const\r\n}\r\ntype actionReset = ReturnType<typeof resetAC>\r\nexport const resetAC = () => {\r\n    return {\r\n        type: \"RESET\"\r\n    } as const\r\n}\r\n\r\nexport const setLocalStorageTC = ():ThunkAction<void, TypeStoreRedux, unknown,\r\n    Actions>=>\r\n    (dispatch,\r\n     getState)=>{\r\n    let currentValueMax = getState().counter.max\r\n    localStorage.setItem('max', JSON.stringify(currentValueMax))\r\n    dispatch(setMaxAC(Number(localStorage.getItem('max'))))\r\n    let currentValueMin = getState().counter.min\r\n    localStorage.setItem('min', JSON.stringify(currentValueMin))\r\n    dispatch(setMinAC(Number(localStorage.getItem('min'))))\r\n    dispatch(setSettingsAC())\r\n}\r\nexport const getLocalStorageTC = ():ThunkAction<void, TypeStoreRedux, unknown,\r\n    Actions>=>(dispatch)=>{\r\n    let maxValue = localStorage.getItem('max')\r\n    let minValue = localStorage.getItem('min')\r\n    if(minValue&&maxValue){\r\n        dispatch(setMaxAC (JSON.parse(maxValue)))\r\n        dispatch(setMinAC(JSON.parse(minValue)))\r\n    }\r\n\r\n\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport Counter from \"./counter\";\r\nimport Clicker from \"./clicker\";\r\nimport SettingsCounter from \"./settingsCounter/settingsCounter\";\r\nimport SettingsClicker from \"./settingsCounter/settingsClicker\";\r\nimport {\r\n    getLocalStorageTC,\r\n    resetAC,\r\n    setCountAC, setLocalStorageTC,\r\n    setMaxAC,\r\n    setMinAC,\r\n    setSettingsAC, TypeStateReducer,\r\n} from \"./Store/counterReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {TypeStoreRedux} from \"./Store/store\";\r\n\r\nfunction App() {\r\n\r\nconst state = useSelector<TypeStoreRedux,TypeStateReducer>(state => state.counter)\r\nconst dispatch = useDispatch()\r\n\r\n\r\n    useEffect(()=>{\r\n        dispatch(getLocalStorageTC())\r\n    },[])\r\n\r\n    const setMax = (value: number) => {\r\n        dispatch(setMaxAC(value))\r\n    }\r\n    const setMin = (value: number) => {\r\n        dispatch(setMinAC(value))\r\n    }\r\n    const setValue = () => {\r\n        dispatch(setLocalStorageTC())\r\n\r\n    }\r\n    const inc = () => {\r\n        dispatch(setCountAC())\r\n    }\r\n    const reset = () => {\r\n        dispatch(resetAC())\r\n    }\r\n    const set = () => {\r\n        dispatch(setSettingsAC())\r\n    }\r\n    return (<div className='Main'>\r\n        <Counter counter={state.count} maxValue={state.max} settings={state.settings}/>\r\n        <Clicker increase={inc} reset={reset} count={state.count}\r\n                 maxValue={state.max} minValue={state.min} set={set} settings={state.settings}/>\r\n        <SettingsCounter maxValue={state.max} setMax={setMax}\r\n                         setMin={setMin} minValue={state.min} settings={state.settings}/>\r\n        <SettingsClicker maxValue={state.max} minValue={state.min}\r\n                         setValue={setValue}\r\n                         settings={state.settings}/>\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { createStore,applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {combineReducers} from 'redux'\r\nimport counterReducer from \"./counterReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n   counter:counterReducer\r\n})\r\nexport type TypeStoreRedux = ReturnType<typeof rootReducer>\r\n\r\n\r\nexport const store = createStore(rootReducer,applyMiddleware(thunkMiddleware))","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./Store/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}><App/></Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}